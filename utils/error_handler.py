"""
error_handler.py - Merkezi hata yÃ¶netim sistemi

Bu modÃ¼l, uygulamadaki tÃ¼m hatalarÄ± merkezi bir ÅŸekilde yÃ¶netmek iÃ§in
gerekli fonksiyonlarÄ± ve dekoratÃ¶rleri iÃ§erir.

Fonksiyonlar:
    - log_error: Hata detaylarÄ±nÄ± loga kaydeder
    - handle_error: Genel hata yakalama dekoratÃ¶rÃ¼
    - handle_critical_error: Kritik hata yakalama dekoratÃ¶rÃ¼
    - display_friendly_error: KullanÄ±cÄ± dostu hata mesajÄ± gÃ¶rÃ¼ntÃ¼ler

Ã–zellikler:
    - Merkezi hata yÃ¶netimi
    - DetaylÄ± hata loglama
    - KullanÄ±cÄ± dostu hata mesajlarÄ±
    - Kritik hata yÃ¶netimi
    - Stack trace kaydÄ±

KullanÄ±m:
    from utils.error_handler import handle_error, display_friendly_error
    
    @handle_error
    def my_function():
        # Kod buraya
        pass
    
    try:
        result = my_function()
    except Exception as e:
        display_friendly_error("Ä°ÅŸlem baÅŸarÄ±sÄ±z", "LÃ¼tfen tekrar deneyin")
"""

import streamlit as st
import logging
import traceback
import functools
from datetime import datetime
from typing import Callable, Any, TypeVar, Optional

# Hata loglama yapÄ±landÄ±rmasÄ±
logging.basicConfig(
    filename='app_errors.log',
    level=logging.ERROR,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Tip gÃ¼venliÄŸi iÃ§in TypeVar tanÄ±mlamasÄ±
F = TypeVar('F', bound=Callable[..., Any])

def log_error(error: Exception, function_name: str) -> None:
    """
    Hata detaylarÄ±nÄ± loga kaydeder.
    
    Bu fonksiyon:
    1. Hata mesajÄ±nÄ± oluÅŸturur
    2. Stack trace'i alÄ±r
    3. Log dosyasÄ±na kaydeder
    4. Hata log dosyasÄ±na kaydeder
    
    Parameters:
        error (Exception): Yakalanan hata
        function_name (str): HatanÄ±n oluÅŸtuÄŸu fonksiyon adÄ±
        
    Hata durumunda:
    - Log dosyasÄ±na yazma hatasÄ± oluÅŸursa sessizce devam eder
    - Hata log dosyasÄ±na yazma hatasÄ± oluÅŸursa sessizce devam eder
    
    Ã–rnek:
        >>> try:
        ...     # Kod buraya
        ... except Exception as e:
        ...     log_error(e, "my_function")
    """
    error_message = f"HATA ({function_name}): {str(error)}"
    stack_trace = traceback.format_exc()
    logging.error(f"{error_message}\n{stack_trace}")
    with open("error_log.txt", "a", encoding="utf-8") as f:
        f.write(f"{datetime.now()}: {error_message}\n")
        f.write(f"Stack Trace: {stack_trace}\n\n")

def handle_error(func: F) -> F:
    """
    Hata yakalama dekoratÃ¶rÃ¼.
    
    Bu dekoratÃ¶r:
    1. Fonksiyonun Ã§alÄ±ÅŸmasÄ±nÄ± izler
    2. HatalarÄ± yakalar
    3. HatalarÄ± loglar
    4. KullanÄ±cÄ±ya bildirir
    
    Parameters:
        func: Decorator uygulanacak fonksiyon
        
    Returns:
        Wrapped function
        
    Hata durumunda:
    - Hata loglanÄ±r
    - KullanÄ±cÄ±ya hata mesajÄ± gÃ¶sterilir
    - None deÄŸeri dÃ¶ndÃ¼rÃ¼lÃ¼r
    
    Ã–rnek:
        >>> @handle_error
        ... def my_function():
        ...     # Kod buraya
        ...     pass
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            log_error(e, func.__name__)
            st.error(f"Ä°ÅŸlem sÄ±rasÄ±nda bir hata oluÅŸtu: {str(e)}")
            return None
    return wrapper  # type: ignore

def handle_critical_error(func: F) -> F:
    """
    Kritik hata yakalama dekoratÃ¶rÃ¼.
    
    Bu dekoratÃ¶r:
    1. Kritik fonksiyonlarÄ± izler
    2. HatalarÄ± yakalar
    3. DetaylÄ± loglama yapar
    4. KullanÄ±cÄ±ya detaylÄ± bildirim yapar
    
    Parameters:
        func: Decorator uygulanacak fonksiyon
        
    Returns:
        Wrapped function
        
    Hata durumunda:
    - Hata CRITICAL olarak loglanÄ±r
    - KullanÄ±cÄ±ya detaylÄ± hata mesajÄ± gÃ¶sterilir
    - Stack trace gÃ¶sterilir
    - None deÄŸeri dÃ¶ndÃ¼rÃ¼lÃ¼r
    
    Ã–rnek:
        >>> @handle_critical_error
        ... def critical_function():
        ...     # Kritik kod buraya
        ...     pass
    """
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        try:
            return func(*args, **kwargs)
        except Exception as e:
            log_error(e, f"CRITICAL-{func.__name__}")
            st.error(f"Kritik bir hata oluÅŸtu: {str(e)}")
            st.error("LÃ¼tfen sistem yÃ¶neticisine baÅŸvurun.")
            if st.button("DetaylarÄ± GÃ¶ster"):
                st.code(traceback.format_exc())
            return None
    return wrapper  # type: ignore

def display_friendly_error(error_message: str, suggestion: Optional[str] = None) -> None:
    """
    KullanÄ±cÄ± dostu hata mesajÄ± gÃ¶rÃ¼ntÃ¼ler.
    
    Bu fonksiyon:
    1. Hata mesajÄ±nÄ± formatlar
    2. KullanÄ±cÄ±ya gÃ¶sterir
    3. Varsa Ã¶neriyi gÃ¶sterir
    
    Parameters:
        error_message (str): GÃ¶sterilecek hata mesajÄ±
        suggestion (str, optional): KullanÄ±cÄ± iÃ§in Ã¶neri
        
    Ã–rnek:
        >>> try:
        ...     # Kod buraya
        ... except Exception as e:
        ...     display_friendly_error(
        ...         "Ä°ÅŸlem baÅŸarÄ±sÄ±z oldu",
        ...         "LÃ¼tfen tekrar deneyin veya sistem yÃ¶neticisine baÅŸvurun"
        ...     )
    """
    st.error(f"ğŸš« {error_message}")
    if suggestion:
        st.info(f"ğŸ’¡ Ã–neri: {suggestion}") 