"""
comparative_analysis.py - KarÅŸÄ±laÅŸtÄ±rmalÄ± analiz ve gÃ¶rselleÅŸtirme iÅŸlemlerini yÃ¶netir.

Bu modÃ¼l, farklÄ± kategoriler arasÄ±nda karÅŸÄ±laÅŸtÄ±rmalÄ± analizler oluÅŸturmak ve 
gÃ¶rselleÅŸtirmek iÃ§in fonksiyonlar iÃ§erir.
"""

import streamlit as st
import plotly.express as px
from io import BytesIO
import plotly.io as pio
import pandas as pd
from typing import Tuple, Optional
from utils.error_handler import handle_error, display_friendly_error
from utils.warning_system import style_overused_rows

# Grafik export ayarlarÄ±
pio.kaleido.scope.default_format = "png"
pio.kaleido.scope.default_width = 1000
pio.kaleido.scope.default_height = 600
pio.kaleido.scope.default_colorway = px.colors.qualitative.Plotly
pio.kaleido.scope.default_paper_bgcolor = "white"
pio.kaleido.scope.default_plot_bgcolor = "white"

from config.constants import MONTHS


@handle_error
def show_comparative_analysis(
    df: pd.DataFrame, 
    group_by_col: str = "Ä°lgili 1"
) -> Tuple[Optional[BytesIO], Optional[BytesIO]]:
    """
    SeÃ§ilen gruplama faktÃ¶rÃ¼ne gÃ¶re karÅŸÄ±laÅŸtÄ±rmalÄ± analiz gÃ¶sterir.
    
    Parameters:
        df (DataFrame): Ä°ÅŸlenecek veri Ã§erÃ§evesi
        group_by_col (str): Gruplama yapÄ±lacak sÃ¼tun adÄ±
        
    Returns:
        Tuple[Optional[BytesIO], Optional[BytesIO]]: 
            (excel_buffer, gÃ¶rÃ¼ntÃ¼_buffer) tuple
    """
    st.subheader(f"ğŸ“Š {group_by_col} BazÄ±nda Harcama KarÅŸÄ±laÅŸtÄ±rmasÄ±")

    if group_by_col not in df.columns:
        display_friendly_error(
            f"{group_by_col} sÃ¼tunu bulunamadÄ±",
            "FarklÄ± bir gruplama kriteri seÃ§in."
        )
        return None, None

    # KullanÄ±cÄ±ya ay seÃ§me seÃ§eneÄŸi ekle
    selected_month = st.selectbox(
        "ğŸ“… Ay SeÃ§imi (Ä°steÄŸe BaÄŸlÄ±)", ["KÃ¼mÃ¼le"] + MONTHS, index=0
    )

    # BÃ¼tÃ§e ve Fiili kolonlarÄ±nÄ±n adÄ±
    if selected_month == "KÃ¼mÃ¼le":
        group_cols = ["KÃ¼mÃ¼le BÃ¼tÃ§e", "KÃ¼mÃ¼le Fiili"]
    else:
        # SeÃ§ilen ay ismi ile uygun BÃ¼tÃ§e ve Fiili kolonlarÄ±nÄ± oluÅŸturuyoruz
        month_budget_col = f"{selected_month} BÃ¼tÃ§e"
        month_actual_col = f"{selected_month} Fiili"

        # KolonlarÄ±n mevcut olup olmadÄ±ÄŸÄ±nÄ± kontrol et
        if month_budget_col not in df.columns or month_actual_col not in df.columns:
            display_friendly_error(
                f"{selected_month} iÃ§in BÃ¼tÃ§e veya Fiili verisi eksik",
                "FarklÄ± bir ay veya 'KÃ¼mÃ¼le' seÃ§ebilirsiniz."
            )
            return None, None

        group_cols = [month_budget_col, month_actual_col]

    # SÃ¼tunlarÄ±n varlÄ±ÄŸÄ±nÄ± kontrol et
    for col in group_cols:
        if col not in df.columns:
            display_friendly_error(
                f"{col} sÃ¼tunu eksik",
                "Veri formatÄ±nÄ±zÄ± kontrol edin."
            )
            return None, None

    try:
        # Verileri gruplama
        grouped = df.groupby(group_by_col)[group_cols].sum().reset_index()

        # KullanÄ±m yÃ¼zdesi
        grouped["KullanÄ±m (%)"] = (grouped[group_cols[1]] / grouped[group_cols[0]]) * 100

        # NaN deÄŸerleri ve sonsuz deÄŸerleri temizle
        grouped.replace([float('inf'), -float('inf')], pd.NA, inplace=True)
        
        # Grafik oluÅŸturma
        fig = px.bar(
            grouped.sort_values(group_cols[1], ascending=False),
            x=group_by_col,
            y=group_cols,
            barmode="group",
            title=f"{group_by_col} BazÄ±nda {selected_month} KarÅŸÄ±laÅŸtÄ±rmasÄ±",
            color_discrete_sequence=["#636EFA", "#EF553B"],
        )  # Mavi ve kÄ±rmÄ±zÄ± renkler

        # Grafik stil ayarlarÄ±
        fig.update_layout(
            template="plotly_white",
            font=dict(color="black", size=12),
            xaxis=dict(tickangle=-45),
            legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1),
            margin=dict(l=50, r=50, t=80, b=150),
        )

        st.plotly_chart(fig, use_container_width=True)

        # GrafiÄŸi hafÄ±zada bir gÃ¶rÃ¼ntÃ¼ye kaydet
        comperative_img_buffer = BytesIO()
        pio.write_image(fig, comperative_img_buffer, format="png", width=800, height=600)
        comperative_img_buffer.seek(0)  # Tamponun baÅŸÄ±na git

        # GÃ¶rÃ¼ntÃ¼ iÃ§in indirme dÃ¼ÄŸmesi ekle
        st.download_button(
            label="â¬‡ Ä°ndir (PNG)",
            data=comperative_img_buffer,
            file_name="comparative_analysis.png",
            mime="image/png",
            key="download_image",
        )

        st.markdown("---")

        # Tablo gÃ¶sterimi
        styled_grouped = style_overused_rows(
            grouped.sort_values(group_cols[1], ascending=False)
        )
        st.dataframe(styled_grouped, use_container_width=True)

        # Excel dosyasÄ± oluÅŸtur
        excel_buffer = BytesIO()
        try:
            grouped.sort_values(group_cols[1], ascending=False).to_excel(
                excel_buffer, index=False
            )
            excel_buffer.seek(0)

            # Excel indirme butonu
            st.download_button(
                label="â¬‡ Ä°ndir (Excel)",
                data=excel_buffer,
                file_name=f"{group_by_col}_bazinda_veriler.xlsx",
                mime="application/vnd.ms-excel",
                key="download_excel",
            )
        except Exception as e:
            display_friendly_error(
                f"Excel oluÅŸturma hatasÄ±: {str(e)}",
                "Excel raporu oluÅŸturulamadÄ±."
            )
            return None, comperative_img_buffer

        return excel_buffer, comperative_img_buffer  # ZIP iÃ§in main.py'ye dÃ¶ndÃ¼r
        
    except Exception as e:
        display_friendly_error(
            f"KarÅŸÄ±laÅŸtÄ±rmalÄ± analiz hatasÄ±: {str(e)}",
            "Veri formatÄ±nÄ± kontrol edin ve tekrar deneyin."
        )
        return None, None
